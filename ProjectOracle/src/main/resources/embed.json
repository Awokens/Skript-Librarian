{
  "beswd3f3f3fwdttitle": [
    "```vb",
    "",
    "THIS AN ",
    "EPIC",
    "TEST",
    "T",
    "T3f3f",
    "T",
    "T",
    "",
    "",
    "",
    "```"
  ],
  "beswdwdttitle": [
    "```vb",
    "",
    "THIS AN ",
    "EPIC",
    "TEST",
    "T",
    "T",
    "T",
    "T",
    "",
    "",
    "",
    "```"
  ],
  "sellall": [
    "SellAll",
    "```vb",
    "",
    "# The on load presets the values of the item being define, look below to see the example.",
    "",
    "on load:",
    "    set {prices::cobblestone} to 10",
    "",
    "# A command to run the sellAll function in today's tutorial.",
    "",
    "command \/sellall:",
    "    trigger:",
    "        add sellAll(player) to {balance::%player's uuid%}",
    "",
    "function sellAll(p: player):",
    "",
    "    #Loop inside the price list variable where it would retrieve the value attached to each block [loop-index].",
    "",
    "    loop {prices::*}:",
    "",
    "        # Calculates the number [preferably size] of the current loop item in the prices list and multiples by it's value added to the local variable 'totalprofit'.",
    "",
    "        add number of (loop-index parsed as item) in {_p}'s inventory * {prices::%loop-index%} to {_totalprofit}",
    "",
    "        # Removes all relating items of the current loop item from player's current inventory.",
    "",
    "        remove all (loop-index parsed as item) from {_p}'s inventory",
    "",
    "    # Returns the total profit to add to the player's balance, or could be use to pass on results to other functions down the skript lines for awesome stuff.",
    "",
    "    return {_totalprofit}",
    "```"
  ],
  "title": [
    "test",
    "test",
    "test"
  ],
  "resetmine": [
    "```vb",
    "",
    "function mine(t: integer, i: item, a: location, b: location):",
    "",
    "    #The {_t} determines the length of the mine.",
    "    loop {_t} times:",
    "",
    "        #Loops through every block within the parameter.",
    "        loop blocks within {_a} and {_b}:",
    "            set loop-block to {_i} if loop-block is air",
    "",
    "        subtract 1 from x-coordinate of {_a}",
    "        subtract 1 from x-coordinate of {_b}",
    "        wait 10 ticks #Time delay",
    "    #The skripts repeats until {_t} has completed it's loop.",
    "",
    "```"
  ]
}